@page "/page/usuario"
@inject IUsuarioService _usuarioServicio
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "1")];

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudText Typo="Typo.h5" GutterBottom="true">Socios</MudText>

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           Color="Color.Primary"
                           OnClick="AbrirNuevoUsuario">
                    Nuevo Administrador
                </MudButton>
            </MudItem>
            <MudItem xs="12">

                <MudTable Items="@listaUsuarios"
                          Dense="true"
                          Striped="true" Bordered="true"
                          Filter="new Func<UsuarioDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.IdUsuario)">ID Usuario</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.NombreApellidos)">Nombre</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.Cedula)">Cedula</MudTableSortLabel></MudTh>
                        <MudTh>Horario</MudTh>
                        <MudTh>Celular</MudTh>
                        <MudTh>Rol</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="usuarioRow">
                        <MudTd DataLabel="IdUsuario">@usuarioRow.IdUsuario</MudTd>
                            <MudTd DataLabel="Nombre">@usuarioRow.NombreApellidos</MudTd>
                            <MudTd DataLabel="Cedula">@FormatoCedula(usuarioRow.Cedula)</MudTd>
                            <MudTd DataLabel="Horario">@usuarioRow.Horario</MudTd>
                            <MudTd DataLabel="Telefono">@usuarioRow.Telefono</MudTd>
                            <MudTd DataLabel="Rol">@usuarioRow.rolDescripcion</MudTd>
                        <MudTd DataLabel="">
                                <td>
                                    <button type="button" class="btn btn-outline-info btn-circle btn-lg btn-circle"
                                            @onclick="(() => AbrirDetalleUsuario(usuarioRow))">
                                        <i class="fa fa-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-info btn-circle btn-lg btn-circle ml-2"
                                            @onclick="(() => AbrirEditarUsuario(usuarioRow))">
                                        <i class="fa fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-info btn-circle btn-lg btn-circle ml-2"
                                            @onclick="(() => EliminarUsuario(usuarioRow))">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </td>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudPaper>

</MudContainer>






@code {
    List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private string searchString1 = "";
    private UsuarioDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerUsuarios()
    {
        var result = await _usuarioServicio.Lista();

        if (result.status)
        {
            listaUsuarios = (List<UsuarioDTO>)result.value!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuarios();
        _loading = false;
    }

    private bool FilterFunc1(UsuarioDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UsuarioDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.NombreApellidos.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Correo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cedula.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.NombreApellidos} {element.Correo} {element.Cedula}".Contains(searchString))
            return true;

        return false;
    }

    private async Task AbrirNuevoUsuario()
    {
        var parametros = new DialogParameters { ["IsCedulaReadOnly"] = false };

        var dialogo = _dialogServicio.Show<MdUsuario>("Nuevo Administrador", parametros);
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerUsuarios();
        }
    }

    private async Task AbrirEditarUsuario(UsuarioDTO usuario)
    {
        var parametros = new DialogParameters { ["_usuario"] = usuario, ["IsCedulaReadOnly"] = true };

        var dialogo = _dialogServicio.Show<MdUsuario>("Editar Administrador", parametros);
        var resultado = await dialogo.Result;
        if (!resultado.Canceled)
        {
            await ObtenerUsuarios();
        }
    }

    private async Task EliminarUsuario(UsuarioDTO usuario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar usuario: {usuario.NombreApellidos}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _usuarioServicio.Eliminar(usuario.IdUsuario);

            if (resultado)
            {
                _snackBar.Add("El usuario fue eliminado", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerUsuarios();
            }
            else
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }

    private async Task AbrirDetalleUsuario(UsuarioDTO usuario)
    {
        int userId = usuario.IdUsuario;

        string url = $"/page/usuario/detalle/{userId}";

        NavigationManager.NavigateTo(url);
    }

    private string FormatoCedula(string cedula)
    {
        if (cedula.Length != 8)
            return cedula;

        return $"{cedula.Substring(0, 1)}.{cedula.Substring(1, 3)}.{cedula.Substring(4, 3)}-{cedula.Substring(7)}";
    }

}
