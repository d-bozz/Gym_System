@inject IRolService _rolServicio
@inject IUsuarioService _usuarioServicio
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">

    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">

            <EditForm Model="@_usuario">

                <MudTextField @bind-Value="@_usuario.NombreApellidos" Required RequiredError="Ingrese Nombre" Class="mb-3"
                              Label="Nombre Completo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />

                <MudTextField @bind-Value="@_usuario.Correo" Required RequiredError="Ingrese Correo" Class="mb-3"
                              Label="Correo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Email" />

                 <MudTextField @bind-Value="@_usuario.Cedula" Required RequiredError="Ingrese Cédula" Class="mb-3"
                               Label="Cedula" ReadOnly="@IsCedulaReadOnly" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.PermIdentity" />

                <MudSelect Label="Rol" Variant="Variant.Outlined" Required RequiredError="Seleccione Rol" AnchorOrigin="Origin.BottomCenter" Class="mb-3"
                           @bind-Value="rolSeleccionado">
                    @if (listaRoles.Any())
                    {
                        foreach (var rol in listaRoles)
                        { 
                            <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudTextField @bind-Value="@_usuario.Telefono" Required RequiredError="Ingrese Teléfono" Class="mb-3"
                              Label="Telefono" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Phone" />

                <MudTextField @bind-Value="@_usuario.Direccion" Required RequiredError="Ingrese Direccón" Class="mb-3"
                              Label="Dirección" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.LocationCity" />

                <MudTextField @bind-Value="@_usuario.Horario" Required RequiredError="Ingrese Horario" Class="mb-3"
                              Label="Horario" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Schedule" />


                <MudTextField @bind-Value="@_usuario.Clave" Required RequiredError="Ingrese Contraseña"  Label="Contraseña" Variant="Variant.Outlined" Class="mb-3"
                              InputType="@PasswordInput" Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="MostrarClave"
                              AdornmentAriaLabel="Mostrar Contraseña" />

                @*Carga de imagen*@

                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="100">
                    <ButtonTemplate Context="buttonContext">
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                               for="@buttonContext">
                            Subir una imagen
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>

                @if (file != null)
                {
                    <MudList>
                        <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                            @file.Name <code>@file.Size bytes</code>
                        </MudListItem>
                    </MudList>
                }

                @*Carga de imagen termina*@

            </EditForm>

        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Guardar">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public UsuarioDTO _usuario { get; set; } = new UsuarioDTO();

    [Parameter] public bool IsCedulaReadOnly { get; set; }

    List<RolDTO> listaRoles = new List<RolDTO>();
    public RolDTO rolSeleccionado;


    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    IBrowserFile file;


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_usuario.IdUsuario);

        var resultado = await _rolServicio.Lista();

        if (resultado.status)
        {
            listaRoles = resultado.value!;
            if (_usuario.IdUsuario != 0)
                rolSeleccionado = listaRoles.FirstOrDefault(p => p.IdRol == _usuario.IdRol)!;
            else
                 rolSeleccionado = listaRoles.First();


        }
    }

    void MostrarClave()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Guardar()	
    {
        _usuario.IdRol = rolSeleccionado.IdRol;
        string _mensaje = "";
        bool _resultado;

        if (string.IsNullOrEmpty(_usuario.NombreApellidos) ||
           string.IsNullOrEmpty(_usuario.Correo) ||
           string.IsNullOrEmpty(_usuario.Telefono) ||
           string.IsNullOrEmpty(_usuario.Direccion) ||
           string.IsNullOrEmpty(_usuario.Horario) ||
           string.IsNullOrEmpty(_usuario.Clave))
        {
            _snackBar.Add("Complete los campos requeridos.", Severity.Error, a => a.VisibleStateDuration = 500);
            return;
        }

        if(_usuario.IdUsuario != 0)
        {
            if (file != null)
            {
                using (var stream = new MemoryStream())
                {
                    try
                    {
                        await file.OpenReadStream().CopyToAsync(stream);
                        _usuario.Foto = Convert.ToBase64String(stream.ToArray());
                    }
                    catch (Exception ex)
                    {
                        _snackBar.Add("Error al cargar la imagen", Severity.Error, a => a.VisibleStateDuration = 500);
                    }
                }
            }

            _resultado = await _usuarioServicio.Editar(_usuario);
            _mensaje = "Usuario fue modificado";
        }
        else
        {
            var response = await _usuarioServicio.Crear(_usuario);
            _resultado = response.status;
            _mensaje = "Usuario fue creado";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            MudDialog.Close(DialogResult.Ok(true));
        }else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);
    }

    private void UploadFiles(IBrowserFile uploadedFile)
    {
        file = uploadedFile;
    }
}
