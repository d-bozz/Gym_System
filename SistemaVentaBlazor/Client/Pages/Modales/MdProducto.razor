@inject ICategoriaService _categoriaServicio
@inject IProductoService _productoServicio
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">

    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">

            <EditForm Model="@_producto">

                <MudTextField @bind-Value="@_producto.Nombre" Required RequiredError="Ingrese Nombre" Class="mb-3"
                              Label="Nombre" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />

                <MudTextField @bind-Value="@_producto.Descripcion" Required RequiredError="Ingrese Descripción" Class="mb-3"
                              Label="Descripcion" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Description" />

                <MudTextField @bind-Value="@_producto.Marca" Required RequiredError="Ingrese Marca" Class="mb-3"
                              Label="Marca" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Bookmarks" />


                <MudSelect Label="Categoria" Variant="Variant.Outlined" Required RequiredError="Seleccione Categoria" AnchorOrigin="Origin.BottomCenter" Class="mb-3"
                           @bind-Value="categoriaSeleccionado">
                    @if (listaCategoria.Any())
                    {
                        foreach (var rol in listaCategoria)
                        {
                            <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudNumericField @bind-Value="@_producto.Stock" Required RequiredError="Ingrese Stock" Class="mb-3"
                              Label="Stock" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.QrCode" />

                <MudNumericField @bind-Value="@_producto.Precio" Required RequiredError="Ingrese Precio" Class="mb-3"
                              Label="Precio" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Money" />

                <MudNumericField @bind-Value="@_producto.Peso" Required RequiredError="Ingrese Peso" Class="mb-3"
                                 Label="Peso" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.MonitorWeight" />

                @*Carga de imagen*@

                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="100">
                    <ButtonTemplate Context="buttonContext">
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@buttonContext">
                            Subir una imagen
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>

                @if (file != null)
                {
                    <MudList>
                            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                                @file.Name <code>@file.Size bytes</code>
                            </MudListItem>
                    </MudList>
                }

                @*Carga de imagen termina*@

            </EditForm>

        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Guardar">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public ProductoDTO _producto { get; set; } = new ProductoDTO();

    List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();
    public CategoriaDTO categoriaSeleccionado;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    IBrowserFile file;

    protected override async Task OnInitializedAsync()
    {

        var resultado = await _categoriaServicio.Lista();

        if (resultado.status)
        {
            listaCategoria = resultado.value!;
            if (_producto.IdProducto != 0)
                categoriaSeleccionado = listaCategoria.FirstOrDefault(p => p.IdCategoria == _producto.IdCategoria)!;
            else
                categoriaSeleccionado = listaCategoria.First();


        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Guardar()
    {
        _producto.IdCategoria = categoriaSeleccionado.IdCategoria;
        string _mensaje = "";
        bool _resultado;

        if (string.IsNullOrEmpty(_producto.Nombre) ||
           string.IsNullOrEmpty(_producto.Descripcion) ||
           string.IsNullOrEmpty(_producto.Marca) ||
           (_producto.IdCategoria == null) ||
           (_producto.Stock == null) ||
           (_producto.Precio == null) ||
           (_producto.Peso == null))
        {
            _snackBar.Add("Complete los campos requeridos.", Severity.Error, a => a.VisibleStateDuration = 500);
            return;
        }

        if (_producto.IdProducto != 0)
        {
            if (file != null)
            {
                using (var stream = new MemoryStream())
                {
                    try
                    {
                        await file.OpenReadStream().CopyToAsync(stream);
                        _producto.Foto = Convert.ToBase64String(stream.ToArray());
                    }
                    catch (Exception ex)
                    {
                        _snackBar.Add("Error al cargar la imagen", Severity.Error, a => a.VisibleStateDuration = 500);
                    }
                }
            }

            _resultado = await _productoServicio.Editar(_producto);
            _mensaje = "Producto fue modificado";
        }
        else
        {
            var response = await _productoServicio.Crear(_producto);
            _resultado = response.status;
            _mensaje = "Producto fue creado";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);

    }

    private void UploadFiles2(IBrowserFile uploadedFile)
    {
        file = uploadedFile;
    }
}
