@page "/page/actividades"

@inject IHorarioActividadService _horarioActividadServicio
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;

@attribute [Authorize(Roles = "1")];

<link href="css/calendar.css" rel="stylesheet">

<!-- Otras importaciones y estilos -->

<div class="container">
    <!-- Encabezado de la tabla -->
    <div class="w-95 w-md-75 w-lg-60 w-xl-55 mx-auto mb-6 text-center">
        <h2 class="display-18 display-md-16 display-lg-14 mb-0">Calendario de Actividades </h2>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.NewLabel"
                       Color="Color.Primary"
                       OnClick="AbrirNuevoHorario">
                Nueva Actividad
            </MudButton>
        </MudItem>
    </div>

    <!-- Tabla de actividades -->
    <div class="row">
        <div class="col-md-12">
            <div class="schedule-table">
                <table class="table bg-white">
                    <thead>
                        <tr>
                            <th>Rutina</th>
                            <th>09:00</th>
                            <th>10:00</th>
                            <th>11:00</th>
                            <th>12:00</th>
                            <th>16:00</th>
                            <th>17:00</th>
                            <th>18:00</th>
                            <th>19:00</th>
                            <th>20:00</th>
                            <th>21:00</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var diaSemana in ObtenerDiasSemana())
                        {
                            <tr>
                                <td class="day">@diaSemana</td>

                                @foreach (var hora in ObtenerHorariosPorDia(diaSemana))
                                {
                                    <td class="@(hora.HorarioObj?.Actividad != null ? "active" : "")">
                                        @if (hora.HorarioObj != null && hora.HorarioObj.Actividad != null)
                                        {
                                            <h4>@hora.HorarioObj.Actividad</h4>
                                            <p>@hora.HoraMostrar</p>
                                            <div class="hover">
                                                <h4>@hora.HorarioObj.Actividad</h4>
                                                <p>@hora.HoraMostrar</p>
                                                <p>@hora.HorarioObj.Encargado</p>
                                                <button type="button" class="btn btn-outline-info btn-circle btn-lg btn-circle ml-2"
                                                    @onclick="(() => AbrirEditarHorario(hora.HorarioObj))">
                                                    <i class="fa fa-edit"></i>
                                                </button>
                                                <!-- Icono de cruz (visible solo al hacer hover) -->
                                                <button type="button" class="delete-icon" style="position: absolute;top: 5px;right: 5px;cursor: pointer;font-size: 16px;color: red;"
                                                @onclick="(() => EliminarHorario(hora.HorarioObj))">
                                                    <i class="fa fa-close"></i>
                                                </button>
                                            </div>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    List<HorarioActividadDTO> listaHorarios = new List<HorarioActividadDTO>();

    List<string> ObtenerDiasSemana()
    {
        return new List<string> { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo" };
    }

    List<HorarioPorHoraDTO> ObtenerHorariosPorDia(string dia)
    {
        var horariosPorDia = new List<HorarioPorHoraDTO>();

        var horasDelDia = new List<int> { 9, 10, 11, 12, 16, 17, 18, 19, 20, 21 };

        foreach (var horaDelDia in horasDelDia)
        {
            var horaInicio = TimeSpan.FromHours(horaDelDia);
            var horaFin = TimeSpan.FromHours(horaDelDia + 1);

            var horario = listaHorarios.FirstOrDefault(h =>
                h.DiaSemana == dia &&
                ((h.HoraInicio <= horaInicio && h.HoraFin > horaInicio) ||
                 (h.HoraInicio < horaFin && h.HoraFin >= horaFin) ||
                 (h.HoraInicio >= horaInicio && h.HoraFin <= horaFin))
            );
            var horarioObj = horario != null ? horario : null;

            var horarioPorHora = new HorarioPorHoraDTO
                {
                    HoraMostrar = $"{horaInicio.Hours:00}:{horaInicio.Minutes:00} - {horaFin.Hours:00}:{horaFin.Minutes:00}",
                    HorarioObj = horarioObj
                };

            horariosPorDia.Add(horarioPorHora);
        }

        return horariosPorDia;
    }

    private HorarioActividadDTO horario = null;
    private bool _loading = true;

    private async Task ObtenerHorarios()
    {
        var result = await _horarioActividadServicio.Lista();

        if (result.status)
        {
            listaHorarios = (List<HorarioActividadDTO>)result.value!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerHorarios();
        _loading = false;
    }

    public class HorarioPorHoraDTO
    {
        public HorarioActividadDTO? HorarioObj { get; set; }
        public string? HoraMostrar { get; set; }
    }

    private async Task AbrirNuevoHorario()
    {
        var dialogo = _dialogServicio.Show<MdHorarioActividad>("Nueva Actividad");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerHorarios();
        }
    }

    private async Task AbrirEditarHorario(HorarioActividadDTO horarioObj)
    {
        try
        {
            if (horarioObj != null)
            {
                var parametros = new DialogParameters { ["_horario"] = horarioObj };

                var dialogo = _dialogServicio.Show<MdHorarioActividad>("Editar Actividad", parametros);
                var resultado = await dialogo.Result;
                if (resultado != null && !resultado.Canceled)
                {
                    await ObtenerHorarios();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener el resultado del diálogo: {ex.Message}");
        }
    }

    private async Task EliminarHorario(HorarioActividadDTO horarioObj)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar actividad: {horarioObj.Actividad} - {horarioObj.DiaSemana} - {horarioObj.HoraInicio} - {horarioObj.HoraFin}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _horarioActividadServicio.Eliminar(horarioObj.IdHorario);

            if (resultado)
            {
                _snackBar.Add("La actividad fue eliminada", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerHorarios();
            }
            else
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }
}
