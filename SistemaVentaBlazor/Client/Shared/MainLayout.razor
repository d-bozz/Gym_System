@inherits LayoutComponentBase
@inject SweetAlertService Swal;
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@inject AuthenticationStateProvider authenticationProvider;

<AuthorizeView>
    <Authorized>
        <MudThemeProvider />
        <MudDialogProvider DisableBackdropClick="true"
                           Position="DialogPosition.Center" />
        <MudSnackbarProvider />

        <MudLayout>
            <MudAppBar Elevation="0">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                <MudText>@GetCurrentUserId(context.User)</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="CerrarSesion" />
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Administración</MudText>
                </MudDrawerHeader>
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>
</AuthorizeView>

@code{
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Desea salir?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (result.IsConfirmed)
        {
            var autenticacionExt = (AuthenticationExtension)authenticationProvider;
            await autenticacionExt.UpdateAuthenticationState(null);
            _navigationManager.NavigateTo("/", true);
        }
    }

    private string GetCurrentUserId(ClaimsPrincipal user)
    {
        var userMail = user.FindFirst(ClaimTypes.Email)?.Value;
        return userMail;
    }
}